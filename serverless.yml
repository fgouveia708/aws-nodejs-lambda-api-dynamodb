service: serverless-lambda-api-with-dynamodb

provider:
  name: aws
  runtime: nodejs10.x
  environment:
    DYNAMODB_TABLE: Contact-${opt:stage, self:provider.stage}
  iamRoleStatements:
   - Effect: "Allow"
     Action:
        - dynamodb:DescribeTable
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
     Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"

functions:
  create:
    handler: handler.create
    events:
    - http:
        path: /contact
        method: post
        cors: true

  getAll:
    handler: handler.getAll
    events:
    - http:
        path: /contacts
        method: get
        cors: true

  get:
    handler: handler.get
    events:
    - http:
        path: /contact/{id}
        method: get
        cors: true

  update:
    handler: handler.update
    events:
    - http:
        path: /contact/{id}
        method: put
        cors: true

  delete:
    handler: handler.delete
    events:
    - http:
        path: /contact/{id}
        method: delete
        cors: true

resources:
  Resources:
    ContactDynamoDbTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
        - AttributeName: "id"
          AttributeType: "S"
        KeySchema:
        - AttributeName: "id"
          KeyType: "HASH"
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_TABLE}
